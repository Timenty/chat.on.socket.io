
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, v as validate_slots, t as text, a as insert_dev, b as set_data_dev, c as detach_dev, e as element, f as space, g as add_location, h as append_dev, n as noop } from './main2.js';

/* src/routes/Name.svelte generated by Svelte v3.29.0 */

const file = "src/routes/Name.svelte";

// (6:7) {#if params.last}
function create_if_block(ctx) {
	let t_value = /*params*/ ctx[0].last + "";
	let t;

	const block = {
		c: function create() {
			t = text(t_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*params*/ 1 && t_value !== (t_value = /*params*/ ctx[0].last + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(6:7) {#if params.last}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let h2;
	let t1;
	let p0;
	let t2;
	let b0;
	let t3_value = /*params*/ ctx[0].first + "";
	let t3;
	let t4;
	let b1;
	let t5;
	let p1;
	let t6;
	let code0;
	let t8;
	let t9;
	let p2;
	let em;
	let t11;
	let code1;
	let t13;
	let code2;
	let if_block = /*params*/ ctx[0].last && create_if_block(ctx);

	const block = {
		c: function create() {
			h2 = element("h2");
			h2.textContent = "Hi there!";
			t1 = space();
			p0 = element("p");
			t2 = text("Your name is:\n    ");
			b0 = element("b");
			t3 = text(t3_value);
			t4 = space();
			b1 = element("b");
			if (if_block) if_block.c();
			t5 = space();
			p1 = element("p");
			t6 = text("This comes from the URL, matching ");
			code0 = element("code");
			code0.textContent = "/hello/:first/:last?";
			t8 = text(", where the last name is optional.");
			t9 = space();
			p2 = element("p");
			em = element("em");
			em.textContent = "Hint:";
			t11 = text(" Try changing the URL and add your name, e.g. ");
			code1 = element("code");
			code1.textContent = "/hello/alex";
			t13 = text(" or ");
			code2 = element("code");
			code2.textContent = "/hello/jane/doe";
			add_location(h2, file, 0, 0, 0);
			add_location(b0, file, 4, 4, 46);
			add_location(b1, file, 5, 4, 72);
			add_location(p0, file, 2, 0, 20);
			add_location(code0, file, 7, 37, 157);
			add_location(p1, file, 7, 0, 120);
			add_location(em, file, 8, 3, 232);
			add_location(code1, file, 8, 63, 292);
			add_location(code2, file, 8, 91, 320);
			add_location(p2, file, 8, 0, 229);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, h2, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, p0, anchor);
			append_dev(p0, t2);
			append_dev(p0, b0);
			append_dev(b0, t3);
			append_dev(p0, t4);
			append_dev(p0, b1);
			if (if_block) if_block.m(b1, null);
			insert_dev(target, t5, anchor);
			insert_dev(target, p1, anchor);
			append_dev(p1, t6);
			append_dev(p1, code0);
			append_dev(p1, t8);
			insert_dev(target, t9, anchor);
			insert_dev(target, p2, anchor);
			append_dev(p2, em);
			append_dev(p2, t11);
			append_dev(p2, code1);
			append_dev(p2, t13);
			append_dev(p2, code2);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*params*/ 1 && t3_value !== (t3_value = /*params*/ ctx[0].first + "")) set_data_dev(t3, t3_value);

			if (/*params*/ ctx[0].last) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(b1, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(h2);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(p0);
			if (if_block) if_block.d();
			if (detaching) detach_dev(t5);
			if (detaching) detach_dev(p1);
			if (detaching) detach_dev(t9);
			if (detaching) detach_dev(p2);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Name", slots, []);
	let { params = {} } = $$props;
	const writable_props = ["params"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Name> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("params" in $$props) $$invalidate(0, params = $$props.params);
	};

	$$self.$capture_state = () => ({ params });

	$$self.$inject_state = $$props => {
		if ("params" in $$props) $$invalidate(0, params = $$props.params);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [params];
}

class Name extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { params: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Name",
			options,
			id: create_fragment.name
		});
	}

	get params() {
		throw new Error("<Name>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set params(value) {
		throw new Error("<Name>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Name;
//# sourceMappingURL=Name.js.map

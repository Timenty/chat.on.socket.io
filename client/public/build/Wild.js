
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, v as validate_slots, e as element, f as space, t as text, g as add_location, a as insert_dev, h as append_dev, b as set_data_dev, n as noop, c as detach_dev } from './main2.js';

/* src/routes/Wild.svelte generated by Svelte v3.29.0 */

const file = "src/routes/Wild.svelte";

function create_fragment(ctx) {
	let h2;
	let t1;
	let p0;
	let t2;
	let code0;
	let t4;
	let code1;
	let t6;
	let t7;
	let p1;
	let t8;
	let t9_value = /*params*/ ctx[0].wild + "";
	let t9;
	let t10;
	let p2;
	let t11;
	let code2;
	let t13;

	const block = {
		c: function create() {
			h2 = element("h2");
			h2.textContent = "Wildcard";
			t1 = space();
			p0 = element("p");
			t2 = text("Anything in the URL after ");
			code0 = element("code");
			code0.textContent = "/wild/";
			t4 = text(" is shown below as message. That's found in the ");
			code1 = element("code");
			code1.textContent = "params.wild";
			t6 = text(" prop.");
			t7 = space();
			p1 = element("p");
			t8 = text("Your message is: ");
			t9 = text(t9_value);
			t10 = space();
			p2 = element("p");
			t11 = text("Note that this route was artificially delayed for 5 seconds to let us see the ");
			code2 = element("code");
			code2.textContent = "Loading";
			t13 = text(" component even when the network is fast (such as testing on localhost).");
			add_location(h2, file, 0, 0, 0);
			add_location(code0, file, 2, 29, 48);
			add_location(code1, file, 2, 96, 115);
			add_location(p0, file, 2, 0, 19);
			add_location(p1, file, 4, 0, 151);
			add_location(code2, file, 6, 81, 271);
			add_location(p2, file, 6, 0, 190);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, h2, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, p0, anchor);
			append_dev(p0, t2);
			append_dev(p0, code0);
			append_dev(p0, t4);
			append_dev(p0, code1);
			append_dev(p0, t6);
			insert_dev(target, t7, anchor);
			insert_dev(target, p1, anchor);
			append_dev(p1, t8);
			append_dev(p1, t9);
			insert_dev(target, t10, anchor);
			insert_dev(target, p2, anchor);
			append_dev(p2, t11);
			append_dev(p2, code2);
			append_dev(p2, t13);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*params*/ 1 && t9_value !== (t9_value = /*params*/ ctx[0].wild + "")) set_data_dev(t9, t9_value);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(h2);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(p0);
			if (detaching) detach_dev(t7);
			if (detaching) detach_dev(p1);
			if (detaching) detach_dev(t10);
			if (detaching) detach_dev(p2);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Wild", slots, []);
	let { params = {} } = $$props;
	const writable_props = ["params"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Wild> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("params" in $$props) $$invalidate(0, params = $$props.params);
	};

	$$self.$capture_state = () => ({ params });

	$$self.$inject_state = $$props => {
		if ("params" in $$props) $$invalidate(0, params = $$props.params);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [params];
}

class Wild extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { params: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Wild",
			options,
			id: create_fragment.name
		});
	}

	get params() {
		throw new Error("<Wild>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set params(value) {
		throw new Error("<Wild>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Wild;
//# sourceMappingURL=Wild.js.map
